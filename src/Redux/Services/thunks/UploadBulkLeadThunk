import { createAsyncThunk } from "@reduxjs/toolkit";
import { fetchAllUploadBulkLead, getByIdUploadBulkLead, postUploadBulkLead, UpdateBulkLead } from "../apis/UploadBulkLeadApi";


export const postUploadBulkLeadThunk = createAsyncThunk(
    'uploadbulklead/postUploadBulkLead',
    async(param, {rejectWithValue})=>{
        try {
            const response = await postUploadBulkLead(param);
            return response;
        } catch (error) {
           return rejectWithValue(error);
        }
    }
);

// Get lead status by ID
export const getByIdUploadBulkLeadThunk = createAsyncThunk(
    'uploadbulklead/getByIdUploadBulkLead',
    async(param, {rejectWithValue}) => {
        try {
            const response = await getByIdUploadBulkLead(param);
            if (response?.success) {
                return response.data;
            }
            return rejectWithValue(response?.message || 'Failed to fetch lead by ID');
        } catch (error) {
            return rejectWithValue(error.message || 'An error occurred while fetching lead by ID');
        }
    }
);

export const fetchAllUploadBulkLeadThunk = createAsyncThunk(
    'uploadbulklead/getAllUploadBulkLead',
    async(params, {rejectWithValue})=>{
        try {
            const response = await fetchAllUploadBulkLead(params);
            return response;
        } catch (error) {
           return rejectWithValue(error);
        }
    }
);

export const UpdateBulkLeadThunk = createAsyncThunk(
    'uploadbulklead/updateUploadBulkLead',
    async(param, {rejectWithValue}) => {
        try {
            const response = await UpdateBulkLead(param);
            if (response?.success) {
                return response;
            }
            return rejectWithValue(response?.message || 'Failed to update lead status');
        } catch (error) {
            return rejectWithValue(error.message || 'An error occurred while updating lead status');
        }
    }
);

// export const getByIdLeadPaymentRaiseThunk = createAsyncThunk(
//     'leadpaymentraise/getByIdLeadPaymentRaise',
//     async(param, {rejectWithValue}) => {
//         try {
//             const response = await getByIdLeadPaymentRaise(param);
//             if (response?.success) {
//                 return response.data;
//             }
//             return rejectWithValue(response?.message || 'Failed to fetch lead status by ID');
//         } catch (error) {
//             return rejectWithValue(error.message || 'An error occurred while fetching lead status by ID');
//         }
//     }
// );